version: '2.1'

services:
  #### --- zoo keeper (3 nodes) ---> ###
  zoo1:
    image: confluentinc/cp-zookeeper:5.5.3
    hostname: zoo1
    container_name: zoo1
    # 클라이언트 포트 2181를 bind 한다.
    ports:
      - "2181:2181"
      - "3181:3181"
    # 주키퍼는 서버는 2개의 포트를 가진다. 
    # 2888은 서버 노드끼리 통신을 하기 위해서 사용한다.
    # 3888은 리더 선출을 위해서 사용한다.
    environment:
      ZOOKEEPER_SERVER_ID: 1
      # 클라이언트가 주키퍼 접속을 위한 포트
      ZOOKEEPER_CLIENT_PORT: 2181
      # Tick 단위시간
      ZOOKEEPER_TICK_TIME: 2000
      # 팔로워가 리더와 연결시도를 하는 최대 횟수
      ZOOKEEPER_INIT_LIMIT: 5
      # 팔로워가 리더와 연결된 후, 앙상블 안에서 리더와 동기화되기 위한 제한 수.
      ZOOKEEPER_SYNC_LIMIT: 2
      #localhost:22888:23888;localhost:32888:33888 #12888은 동기화를 위한 포트, 13888은 클러스터 구성 시, leader를 선출하기 위한 포트
      ZOOKEEPER_SERVERS: zoo1:2888:3888;zoo2:2888:3888;zoo3:2888:3888
      # JMX Monitoring (https://docs.confluent.io/platform/current/installation/docker/operations/monitoring.html)
      KAFKA_HEAP_OPTS: '-Xms256m -Xmx256m'
      KAFKA_JMX_PORT: 3181
      # KAFKA_JMX_OPTS: '-Djava.rmi.server.hostname=192.2.0.11 -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.port=10020 -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false'
    networks:
      # - kafka_net
      kafka_net:
        ipv4_address: 172.18.0.101
    volumes:
      - ./zookeeper/zoo1/data:/data
      - ./zookeeper/zoo1/datalog:/datalog 

  zoo2:
    image: confluentinc/cp-zookeeper:5.5.3
    hostname: zoo2
    container_name: zoo2
    ports:
      - "2182:2182"
      - "3182:3182"
    environment:
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 2182
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zoo1:2888:3888;zoo2:2888:3888;zoo3:2888:3888
      KAFKA_HEAP_OPTS: '-Xms256m -Xmx256m'
      KAFKA_JMX_PORT: 3182
    networks:
      # - kafka_net
      kafka_net:
        ipv4_address: 172.18.0.102
    volumes:
      - ./zookeeper/zoo2/data:/data
      - ./zookeeper/zoo2/datalog:/datalog 

  zoo3:
    image: confluentinc/cp-zookeeper:5.5.3
    hostname: zoo3
    container_name: zoo3
    ports:
      - "2183:2183"
      - "3183:3183"
    environment:
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_CLIENT_PORT: 2183
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zoo1:2888:3888;zoo2:2888:3888;zoo3:2888:3888
      KAFKA_HEAP_OPTS: '-Xms256m -Xmx256m'
      KAFKA_JMX_PORT: 3183
    networks:
      # - kafka_net
      kafka_net:
        ipv4_address: 172.18.0.103
    volumes:
      - ./zookeeper/zoo3/data:/data
      - ./zookeeper/zoo3/datalog:/datalog 

  # 3개의 카프카 브로커를 구성한다.
  # Advertised listeners와 주키퍼 노드 포트를 등록한다.
  # 3개의 파티션을 구성한다.
  kafka1:
    image: confluentinc/cp-kafka:5.5.3
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9091:9091"
      - "3091:3091"
    environment:
      # broker.id 에 설정되는 정수값(식별자)
      KAFKA_BROKER_ID: 1
      # 브로커의 메타데이터를 주키퍼에 저장하기 위한 위치. 호스트에 이름을 추가하면 호스트명:포트로 작성할 수 있고, 주키퍼 앙상블시에는 모든 값을 적어줌.
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2182,zoo3:2183"
      # 리스너 들의 목록이고, 호스트/ip 로 구성한다. 해당 옵션을 사용하지 않으면 모든 인터페이스에서 수신 할 수 있다. 기본값. 0.0.0.0
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19091,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9091
      #브로커 간 통신에 사용할 리스너를 정의. KAFKA_ADVERTISED_LISTENERS 가 여러개인 경우 꼭 사용해야함
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      # the listener name is not a security protocol, listener.security.protocol.map must also be set. PLAINTEXT는 리스너가 암호화되지 않은 것을 말함.
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      #토픽이 몇 개의 파티션으로 생성되는지. 기본 값은 1개이다. 토픽의 파티션 개수는 증가만 가능하고 감소될 수 없다. (클러스터의 브로커수와 그의 배수로 해주는 것이 권장된다.)
      # KAFKA_NUM_PARTITIONS: 3
      #오프셋을 포함한 토픽 정보가 저장되는 경로. 도커기반시 volume에서 아래와 같이 따로 잡아주어야 함.
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      # KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_LOG_RETENTION_HOURS: 768
      # KAFKA_LOG_RETENTION_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_HEAP_OPTS: '-Xms256m -Xmx512m'
      KAFKA_JMX_PORT: 3091
    volumes:
      - ./broker/kafka1/data:/var/lib/kafka/data
    depends_on:
      - zoo1
      - zoo2
      - zoo3
    networks:
      # - kafka_net
      kafka_net:
        ipv4_address: 172.18.0.111

  kafka2:
    image: confluentinc/cp-kafka:5.5.3
    hostname: kafka2
    container_name: kafka2
    ports:
      - "9092:9092"
      - "3092:3092"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2182,zoo3:2183"
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka2:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      # KAFKA_NUM_PARTITIONS: 3
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      # KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_LOG_RETENTION_HOURS: 768
      # KAFKA_LOG_RETENTION_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_HEAP_OPTS: '-Xms256m -Xmx512m'
      KAFKA_JMX_PORT: 3092
    volumes:
      - ./broker/kafka2/data:/var/lib/kafka/data
    depends_on:
      - zoo1
      - zoo2
      - zoo3
    networks:
      # - kafka_net
      kafka_net:
        ipv4_address: 172.18.0.112

  kafka3:
    image: confluentinc/cp-kafka:5.5.3
    hostname: kafka3
    container_name: kafka3
    ports:
      - "9093:9093"
      - "3093:3093"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2182,zoo3:2183"
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka3:19093,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      # KAFKA_NUM_PARTITIONS: 3
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      # KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_LOG_RETENTION_HOURS: 768
      # KAFKA_LOG_RETENTION_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_HEAP_OPTS: '-Xms256m -Xmx512m'
      KAFKA_JMX_PORT: 3093
    volumes:
      - ./broker/kafka3/data:/var/lib/kafka/data
    depends_on:
      - zoo1
      - zoo2
      - zoo3
    networks:
      # - kafka_net
      kafka_net:
        ipv4_address: 172.18.0.113   


  ##### https://docs.confluent.io/platform/current/installation/docker/config-reference.html
  # kafka_connect1:
  #   image: confluentinc/cp-kafka-connect:5.2.1
  #   hostname: kafka-connect
  #   ports: 
  #     - 7071
  #   environment:
  #     CONNECT_BOOTSTRAP_SERVERS: kafka1:19091,kafka2:19092,kafka3:19093
  #     CONNECT_REST_PORT: 28082
  #     CONNECT_GROUP_ID: kafka-connect-consumer-group-1
  #     CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs




  # kafka-schema-registry:
  #   image: confluentinc/cp-schema-registry:5.2.1
  #   hostname: kafka-schema-registry
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:19091
  #     SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
  #     SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "localhost:8081/subjects"]
  #     interval: 1m30s
  #     timeout: 5s
  #     retries: 3
  #   depends_on:
  #     - zoo1
  #     # - zoo2
  #     # - zoo3
  #     - kafka1
  #     # - kafka2
  #     # - kafka3
  #   networks:
  #     - kafka_net

  # kafka-schema-registry-ui:
  #   image: landoop/schema-registry-ui:0.9.4
  #   hostname: kafka-schema-registry-ui
  #   ports:
  #     - "8001:8000"
  #   environment:
  #     SCHEMAREGISTRY_URL: http://kafka-schema-registry:8081/
  #     PROXY: "true"
  #   depends_on:
  #     - kafka-schema-registry
  #   networks:
  #     - kafka_net

  kafka_manager:
    image: hlebalbau/kafka-manager:latest
    container_name: kafka-manager
    hostname: kafka-manager
    restart: unless-stopped
    ports:
      - 7000:9000
    environment:
      # ZK_HOSTS: 'zoo1:2181,zoo2:2182,zoo3:2183'
      ZK_HOSTS: 'zoo1:2181'
    networks:
      # - kafka_net
      kafka_net:
        ipv4_address: 172.18.0.131
    depends_on:
      - zoo1
      - zoo2
      - zoo3

  zoonavigator-web:
    image: elkozmon/zoonavigator-web:0.5.1
    ports: 
      - "8004:8004"
    environment:
      API_HOST: "zoonavigator-api"
      API_PORT: 9000
    links:
      - zoonavigator-api
    depends_on:
      - zoonavigator-api
    networks:
      # - kafka_net
      kafka_net:
        ipv4_address: 172.18.0.132

  zoonavigator-api:
    image: elkozmon/zoonavigator-api:0.5.1
    environment:
      SERVER_HTTP_PORT: 9000
    depends_on:
      - zoo1
      - zoo2
      - zoo3
    networks:
      # - kafka_net
      kafka_net:
        ipv4_address: 172.18.0.133



# Networks for Kafka Cloud
# ==> docker network create -d bridge kafka_net --gateway 172.16.1.1 --subnet 172.16.1.0/24
networks:
  kafka_net:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "true"
    ipam:
      config:
        - subnet: 172.18.0.0/24 
          gateway: 172.18.0.1
        - subnet: "2001:3984:3989::/64"
          gateway: "2001:3984:3989::1"
